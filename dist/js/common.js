function getUrlVars(){for(var n,i=[],t=window.location.href.slice(window.location.href.indexOf("?")+1).split("&"),o=0;o<t.length;o++)n=t[o].split("="),i.push(n[0]),i[n[0]]=n[1];return i}$(document).ready(function(){function n(n){n?$(".loading").addClass("on").fadeIn():$(".loading").removeClass("on").fadeOut()}function i(n,i){if(n)try{$("#"+i)[0].play()}catch(t){}else try{$("#"+i)[0].pause()}catch(t){}}function t(){a.hasToHide.show(),$(".step3").hide()}function o(){$(".step3").fadeOut(),$(".step1").fadeIn()}var e=io("http://lab.medialand.com.tw",{path:"/andy/socket.io"}),a={wrapper:$(".wraper"),mainImg:$(".mainImg"),word:$(".wrapper .word"),hasToHide:$(".hasToHide"),ml:0,num:0,time:1};e.on("ioAlert",function(n){console.log(n.msg),e.emit("userData",{h:$(window).height(),w:$(window).width()})}),e.on("imgReady",function(i){a.mainImgUrl=i.url,a.num=i.num,$(".step2 .number").html(a.num),t(),n(!0),$(".step1").fadeOut(),a.mainImg.attr("src",a.mainImgUrl).on("load",function(){n(!1),e.emit("imgGo")}).each(function(){this.complete&&$(this).load()})}),e.on("imgGo",function(n){a.word.addClass("on"),a.ml=$(window).width()+n.ml,a.mainImg.css({height:n.h,width:"auto",top:n.y,left:a.ml})}),e.on("countToGo",function(n){a.hasToHide.hide(),setTimeout(function(){i(!0,"count1"),a.num==n.num&&e.emit("start",{width:a.mainImg.width()})},1e3)}),e.on("imgMove",function(n){a.mainImg.animate({left:n.d*-1},3e3,function(){e.emit("finish")})}),e.on("finish",function(){$(".step3").fadeIn()}),$(window).load(function(){n(!1),$("audio").each(function(n,i){$(i).get(0).play()}),setTimeout(function(){$("audio").each(function(n,i){if("button"!=$(i).prop("id")){var t=$(i).get(0);t.pause(),t.muted=!1}})},300)}),$(".submit").click(function(){i(!0,"count1"),e.emit("imgReady",{url:$(".imgUrl").val()})}),$(".wrapper .word").click(function(){e.emit("countToGo")}),$(".back").click(o),$(".again").click(function(){e.emit("imgReady",{url:$(".imgUrl").val()})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
